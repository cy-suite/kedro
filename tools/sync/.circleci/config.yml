version: 2.1

parameters:
  release_kedro:
    type: boolean
    default: false

executors:
  generic:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/#circleci-base-image
      - image: cimg/base:2020.01
  build_executor:
    docker:
      - image: cimg/python:3.8
  docker:
    parameters:
      python_version:
        type: string
    docker:
      - image: 350138855857.dkr.ecr.eu-west-2.amazonaws.com/kedro-builder:<<parameters.python_version>>
    resource_class: medium+

commands:
  configure_ssh_keys:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "a0:3f:6a:d9:c3:c7:c2:56:e7:38:bc:ce:d2:dc:9e:be"
  remove_ssh_config:
    steps:
      - run:
          name: Remove SSH config
          command: rm ~/.ssh/config

jobs:
  sync:
    executor: generic
    steps:
      - checkout
      - configure_ssh_keys
      - remove_ssh_config
      - run:
          name: Trigger Read The Docs build
          command: ./tools/sync/rtd-build.sh ${RTD_TOKEN} latest
      - run:
          name: Maybe trigger the release workflow
          command: |
              KEDRO_VERSION=$(./tools/sync/github_scripts/kedro_version.py ./kedro)

              if ./tools/sync/check-no-version-pypi.sh "${KEDRO_VERSION}"
              then
                  echo "Starting the release of Kedro ${KEDRO_VERSION}!"
                  ./tools/sync/circle-release.sh github/quantumblacklabs/kedro
              else
                  echo "Kedro version ${KEDRO_VERSION} already exists on PyPI, skipping..."
                fi
      - run:
          name: Maybe merge main into develop or raise a PR
          command: ./tools/sync/github_scripts/merge.sh . "main" "develop" "${GITHUB_TAGGING_TOKEN}"
      - run:
          name: Maybe merge an automatic PR into develop
          command: ./tools/sync/github_scripts/attempt_merge_pr.sh "merge-main-to-develop" "develop" "${GITHUB_TAGGING_TOKEN}"

  build_docker_image:
    executor: build_executor
    environment:
      ECR_IMAGE_URL: 350138855857.dkr.ecr.eu-west-2.amazonaws.com/kedro-builder
      AWS_REGION: eu-west-2
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Setup AWS CLI
          command: pip install -U awscli
      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | \
            docker login --username AWS --password-stdin "${ECR_IMAGE_URL}"
      - run:
          name: Build docker images
          command: ~/project/docker_build_img/build.sh "${HOME}/kedro" "${ECR_IMAGE_URL}"
          no_output_timeout: 20m
      - run:
          name: Logout from AWS ECR
          command: docker logout "${ECR_IMAGE_URL}"
          when: always  # logout even if the previous step has failed

  # This is effectively just a combination of the lint, unit_tests and e2e_tests jobs.
  # It's used to check that the nightly docker image is working ok and before publishing a release.
  build_kedro:
    parameters:
      python_version:
        type: string
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    steps:
      - setup
      #        - run:
      #            name: Install pre-commit hooks
      #            command: pre-commit install --install-hooks
      - run:
          name: Run linters
          command: make lint
      - run:
          name: Run unit tests
          command: make test
      - run:
          name: Run e2e tests
          command: make e2e-tests

  publish_kedro:
    executor:
      name: docker
      python_version: "3.7"
    steps:
      - setup
      - configure_ssh_keys
      - remove_ssh_config
      - run:
          name: Check Kedro version
          command: |
            KEDRO_VERSION=$(~/project/github_scripts/kedro_version.py ./kedro)

            if ~/project/check-no-version-pypi.sh "${KEDRO_VERSION}"
            then
                echo "export KEDRO_VERSION=\"${KEDRO_VERSION}\"" >> $BASH_ENV
            else
                echo "Error: Kedro version ${KEDRO_VERSION} already exists on PyPI"
                exit 1
            fi
      - run:
          name: Tag and publish release on Github
          command: ~/project/github_scripts/release.sh quantumblacklabs kedro ${GITHUB_TAGGING_TOKEN} ${KEDRO_VERSION}
      - run:
          name: Publish to PyPI
          command: |
            make package
            python -m pip install twine -U
            python -m twine upload --repository-url ${TWINE_REPOSITORY_URL} dist/*
      - run:
          name: Trigger Read The Docs build
          command: |
            ~/project/rtd-build.sh ${RTD_TOKEN} stable
            # give some time for GitHub release to propagate
            # otherwise RTD fails to build a new tag
            sleep 120
            ~/project/rtd-build.sh ${RTD_TOKEN} ${KEDRO_VERSION}

workflows:
  version: 2

  main_updated:
    triggers:
      - schedule:
          filters:
            branches:
              only: main
    jobs:
      - sync
      # PUT kedro_viz_build in here

  nightly_build:
    triggers:
      - schedule:
          cron: "30 2 * * *"
          filters:
            branches:
              only: main
    jobs:
      - build_docker_image
      - build_kedro:
          matrix:
            parameters:
              python_version: ["3.6", "3.7", "3.8"]
          requires:
            - build_docker_image

  do_kedro_release:
    when: <<pipeline.parameters.release_kedro>>  # only run if 'release_kedro' flag is set
    jobs:
      - build_kedro:
          matrix:
            parameters:
              python_version: ["3.6", "3.7", "3.8"]
      - publish_kedro:
          requires:
            - build_kedro
