{
    "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_loading_base_config": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_base_config(self):\n        \"\"\"Benchmark the time to load the base configuration\"\"\"\n        config = self.loader[\"globals\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n    \n        # Create sample config files in the temp directory\n        self._create_config_file(\"base\", \"globals.yml\", {\"global_param\": \"value\"})\n        self._create_config_file(\"base\", \"catalog.yml\", {\"dataset\": {\"type\": \"pandas.CSVDataSet\"}})\n        self._create_config_file(\"local\", \"catalog.yml\", {\"dataset\": {\"filepath\": \"data.csv\"}})\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source.as_posix(), env=self.env)",
        "min_run_count": 2,
        "name": "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_loading_base_config",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d40454765b26efac921c78a6fef4a045a8e533266f53becd29e5b3d960de881a",
        "warmup_time": -1
    },
    "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_loading_env_config": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_env_config(self):\n        \"\"\"Benchmark the time to load environment-specific configuration\"\"\"\n        config = self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n    \n        # Create sample config files in the temp directory\n        self._create_config_file(\"base\", \"globals.yml\", {\"global_param\": \"value\"})\n        self._create_config_file(\"base\", \"catalog.yml\", {\"dataset\": {\"type\": \"pandas.CSVDataSet\"}})\n        self._create_config_file(\"local\", \"catalog.yml\", {\"dataset\": {\"filepath\": \"data.csv\"}})\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source.as_posix(), env=self.env)",
        "min_run_count": 2,
        "name": "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_loading_env_config",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a0fd9c77896289880cc8bbde02dc4ef9b7eb6bcba23d6c91a23ccb202d391b9f",
        "warmup_time": -1
    },
    "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_merge_destructive_strategy": {
        "code": "class TimeOmegaConfigLoader:\n    def time_merge_destructive_strategy(self):\n        \"\"\"Benchmark the time to load and destructively merge configurations\"\"\"\n        self.loader.merge_strategy = {\"catalog\": \"destructive\"}\n        config = self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n    \n        # Create sample config files in the temp directory\n        self._create_config_file(\"base\", \"globals.yml\", {\"global_param\": \"value\"})\n        self._create_config_file(\"base\", \"catalog.yml\", {\"dataset\": {\"type\": \"pandas.CSVDataSet\"}})\n        self._create_config_file(\"local\", \"catalog.yml\", {\"dataset\": {\"filepath\": \"data.csv\"}})\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source.as_posix(), env=self.env)",
        "min_run_count": 2,
        "name": "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_merge_destructive_strategy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bc851f1a9364e2a0de2d111f30652d404e1b61da33d1377799c163c00b2690f8",
        "warmup_time": -1
    },
    "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy": {
        "code": "class TimeOmegaConfigLoader:\n    def time_merge_soft_strategy(self):\n        \"\"\"Benchmark the time to load and soft-merge configurations\"\"\"\n        self.loader.merge_strategy = {\"catalog\": \"soft\"}\n        config = self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n    \n        # Create sample config files in the temp directory\n        self._create_config_file(\"base\", \"globals.yml\", {\"global_param\": \"value\"})\n        self._create_config_file(\"base\", \"catalog.yml\", {\"dataset\": {\"type\": \"pandas.CSVDataSet\"}})\n        self._create_config_file(\"local\", \"catalog.yml\", {\"dataset\": {\"filepath\": \"data.csv\"}})\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source.as_posix(), env=self.env)",
        "min_run_count": 2,
        "name": "OmegaConfigLoader.benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "08a283d77079d9fcf30a4863dfe0bafbd85d27b7e84b13eca9a9a7267eaf5b16",
        "warmup_time": -1
    },
    "benchmark_dummy.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for key in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmark_dummy.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "86e015a3c40c52da31e4185fff7c7176c38c5e1e1e4aba71912db0b388225191",
        "warmup_time": -1
    },
    "version": 2
}