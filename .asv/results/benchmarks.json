{
    "benchmark_datacatalog.TimeDataCatalog.time_add_all": {
        "code": "class TimeDataCatalog:\n    def time_add_all(self):\n        \"\"\"Benchmark the time to add all datasets\"\"\"\n        self.catalog.add_all(self.datasets)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_add_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f470854de9a319e47c6bab999cdb3c7662341b063447a6866500b2e70b2c5ed8",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_exists": {
        "code": "class TimeDataCatalog:\n    def time_exists(self):\n        \"\"\"Benchmark the time to check if datasets exist\"\"\"\n        for i in range(1,1001):\n            self.catalog.exists(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_exists",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9bbce85f01a2cfbb5569bc2ba076dd22b662d5d17db4901cd5269d14dbce3ea6",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_feed_dict": {
        "code": "class TimeDataCatalog:\n    def time_feed_dict(self):\n        \"\"\"Benchmark the time to add feed dict\"\"\"\n        self.catalog.add_feed_dict(self.feed_dict)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_feed_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0101ab38b04d7b27eda18738a82f5f06e48604c6e91d0e10bae33327bb588f69",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_initialise": {
        "code": "class TimeDataCatalog:\n    def time_initialise(self):\n        \"\"\"Benchmark the time to initialise the catalog\"\"\"\n        DataCatalog.from_config(base_catalog)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_initialise",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9e460ed25ea64f63f905b3f3a01a817e5daa00c81390b0cdfc25fbad0ae85ea6",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_list": {
        "code": "class TimeDataCatalog:\n    def time_list(self):\n        \"\"\"Benchmark the time to list all datasets\"\"\"\n        self.catalog.list()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4a7ae456f2349941bdbc595b3919284633da1da166cf1394660a0399ec618687",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_load": {
        "code": "class TimeDataCatalog:\n    def time_load(self):\n        \"\"\"Benchmark the time to load datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.load(f\"dataset_load_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_load",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "96bd6914ea6ed937ae958177afd17861ccf3ab1481a5d4d2ed8002dbc5d1131e",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_release": {
        "code": "class TimeDataCatalog:\n    def time_release(self):\n        \"\"\"Benchmark the time to release datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.release(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_release",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fa49ed3249b0319f92a7d6309f2a58ed8595c86141b16768cd575326a2d28d77",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_resolve_factory": {
        "code": "class TimeDataCatalog:\n    def time_resolve_factory(self):\n        \"\"\"Benchmark the time to resolve factory\"\"\"\n        for i in range(1,1001):\n            self.catalog._get_dataset(f\"dataset_factory_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_resolve_factory",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c051d31d513ef455328bb051eafacb1cc06d9f84dd613ee2e0bee3440bbab467",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_save": {
        "code": "class TimeDataCatalog:\n    def time_save(self):\n        \"\"\"Benchmark the time to save datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.save(f\"dataset_{i}\", self.dataframe)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4ea897eb28bd91fc7cf8da6e2679bf608b909c8db9ebdffd97f3bf19b275a809",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_shallow_copy": {
        "code": "class TimeDataCatalog:\n    def time_shallow_copy(self):\n        \"\"\"Benchmark the time to shallow copy the catalog\"\"\"\n        self.catalog.shallow_copy()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_shallow_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "64ead39024c492d18b91a21c23a9d3f1323533cd37bd53934d54701ecb259762",
        "warmup_time": -1
    },
    "benchmark_dummy.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for key in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmark_dummy.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "86e015a3c40c52da31e4185fff7c7176c38c5e1e1e4aba71912db0b388225191",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_catalog": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_catalog(self):\n        \"\"\"Benchmark the time to load the catalog\"\"\"\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3ccff2348faeaf3038548994686b45deeaa3c7c46df2270a8a1f697e7401ae5a",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_globals": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_globals(self):\n        \"\"\"Benchmark the time to load global configuration\"\"\"\n        self.loader[\"globals\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_globals",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d42dda2b001097642dc790de01ab15e3f1f11426f6bfc5affbc1c658248f32be",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_parameters(self):\n        \"\"\"Benchmark the time to load the parameters\"\"\"\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3187d47ad3445bdf83439512e124e3cde01f0503a3ffa7db9ca7a02e6bc2f7f2",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters_runtime": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_parameters_runtime(self):\n        \"\"\"Benchmark the time to load parameters with runtime configuration\"\"\"\n        self.loader.runtime_params = _generate_params(2001, 2002)\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters_runtime",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "153be6afe75261c83d15bbc165c10b98af15d3489c722c0f7f8e5c0ce3ca2d59",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy": {
        "code": "class TimeOmegaConfigLoader:\n    def time_merge_soft_strategy(self):\n        \"\"\"Benchmark the time to load and soft-merge configurations\"\"\"\n        self.loader.merge_strategy = {\"catalog\": \"soft\"}\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "317897f43311426ea9b688e3019361eb5bb1f61f60eca4f763d7a8ec38265ea2",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_catalog": {
        "code": "class TimeOmegaConfigLoaderAdvanced:\n    def time_loading_catalog(self):\n        \"\"\"Benchmark the time to load the catalog\"\"\"\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params_with_globals)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5499c39a6750c5d527f1a3e8a747fdd5b3128af31640d9d7ee9c72be261e344a",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_parameters": {
        "code": "class TimeOmegaConfigLoaderAdvanced:\n    def time_loading_parameters(self):\n        \"\"\"Benchmark the time to load parameters with global interpolation\"\"\"\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params_with_globals)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_parameters",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f74ef4eead7a35df856006dbf9e1b72b61ba36b34767525f55bf8c5eabb343f1",
        "warmup_time": -1
    },
    "version": 2
}