name: Run unit-tests on Kedro

on:
  workflow_call:
    inputs:
      os:
        type: string
      python-version:
        type: string
jobs:
  unit-tests:
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python ${{inputs.python-version}}
        uses: actions/setup-python@v3
        with:
          python-version: ${{inputs.python-version}}
      - run: make install-pip-setuptools
      - name: Cache python packages for Linux
        if: inputs.os == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{inputs.os}}-python-${{inputs.python-version}}
      - name: Cache python packages for Windows
        if: inputs.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{inputs.os}}-python-${{inputs.python-version}}
      - name: Install dependencies
        run: |
            make install-test-requirements
            make install-pre-commit
      - name: Install pytables (only for windows)
        if: inputs.os == 'windows-latest'
        run: pip install tables
      - name: Initialize conda
        if: inputs.os == 'windows-latest'
        run: conda init powershell
      - name: Create 'kedro_builder' conda environment
        if: inputs.os == 'windows-latest'
        run: conda create -n kedro_builder python=<<parameters.python_version>> -y
      - name: Install Microsoft Visual C++ Redistributable
        if: inputs.os == 'windows-latest'
        run: |
          $ProgressPreference = "SilentlyContinue"
          Invoke-WebRequest https://aka.ms/vs/16/release/vc_redist.x64.exe -OutFile vc_redist.x64.exe
          .\vc_redist.x64.exe /S /v/qn
      - name: Install 'make' command
        if: inputs.os == 'windows-latest'
        run: choco install make
      - name: Install GDAL, Fiona and pytables
        if: inputs.os == 'windows-latest'
        run: conda activate kedro_builder; conda install gdal fiona pytables -c conda-forge -y
      - name: Show pip information
        if: inputs.os == 'windows-latest'
        run: conda activate kedro_builder; pip debug --verbose
      - name: Install all requirements
        if: inputs.os == 'windows-latest'
        run: conda activate kedro_builder; pip install -v -U .[test]
      - name: Print Python environment
        if: inputs.os == 'windows-latest'
        run: conda activate kedro_builder; make print-python-env
      - name: pip freeze
        run: pip freeze
      - name: Run unit tests
        if: inputs.os == 'ubuntu-latest' && inputs.python-version == '3.10'
        run: make test-sequential
      - name: Run unit tests
        if: inputs.os == 'ubuntu-latest' && inputs.python-version != '3.10'
        run: make test
      - name: Run unit tests (Windows)
        if: inputs.os == 'windows-latest' && inputs.python-version == '3.10'
        run: make test-no-spark-sequential
      - name: Run unit tests (Windows)
        if: inputs.os == 'windows-latest' && inputs.python-version != '3.10'
        run: make test-no-spark
